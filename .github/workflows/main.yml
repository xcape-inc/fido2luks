# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-builder

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-and-push-image:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # allow access to github docker registry
    permissions:
      contents: read
      packages: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set short sha
        id: shortsha
        run: echo "::set-output name=sha_short::${GITHUB_SHA::7}"

      - name: Set uid:gid
        id: uidgid
        run: |
          echo "::set-output name=uid::$(id -u)"
          echo "::set-output name=gid::$(id -g)"
          echo "::set-output name=uid_gid::$(id -u):$(id -g)"

      - name: Current uid:gid
        run: echo ${{ steps.uidgid.outputs.uid_gid }}

      #- name: Set up QEMU
      #  uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=sha
          labels: |
            org.opencontainers.image.ref.name=${{ github.ref }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./.devcontainer
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # TODO: template this so all target platforms can use it
  # Steps represent a sequence of tasks that will be executed as part of the job
  .steps: &build-package-steps-template
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: '0'

    - name: get the current dynamic git version numbers
      id: get_versions
      run: |
        git clone https://github.com/xcape-inc/ci-tools.git --branch main --single-branch .git/ci-tools
        . .git/ci-tools/get_tag_from_git.sh > /dev/null
        echo "::set-output name=cur_version::${CUR_VERSION}"
        echo "::set-output name=long_form_cur_version::${LONG_FORM_CUR_VERSION}"

    - name: show version
      run: |
        echo Short version: ${{ steps.get_versions.outputs.cur_version }}
        echo Long version: ${{ steps.get_versions.outputs.long_form_cur_version }}

    - name: Set short sha
      id: shortsha
      run: echo "::set-output name=sha_short::${GITHUB_SHA::7}"

    - name: Set uid:gid
      id: uidgid
      run: |
        echo "::set-output name=uid::$(id -u)"
        echo "::set-output name=gid::$(id -g)"
        echo "::set-output name=uid_gid::$(id -u):$(id -g)"

    - name: Current uid:gid
      run: echo ${{ steps.uidgid.outputs.uid_gid }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to the Container registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        # generate Docker tags based on the following events/attributes
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          type=semver,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          type=sha
        labels: |
          org.opencontainers.image.ref.name=${{ github.ref }}

  # Parallel workflows for each target arch
  build-package-arm64-package:
    needs: build-and-push-image
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # allow access to github docker registry
    permissions:
      contents: read
      packages: read

    steps: 
      <<: *build-package-steps-template

      ### begin Arch specific stuff
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Cross-compile arm64 debian package
        uses: ./
        with:
          # ensure the user in the action matches the current user in the job
          uid: ${{ steps.uidgid.outputs.uid }}
          gid: ${{ steps.uidgid.outputs.gid }}
          bash_script: |
            id
            pwd
            ls -la
            env
            ps -ef | cat
            rustup show
            cargo deb --target aarch64-unknown-linux-gnu -- --all-features

      - name: Store package artifact
        uses: actions/upload-artifact@v2
        with:
          name: fido2luks-arm64-debs
          path: target/aarch64-unknown-linux-gnu/debian/fido2luks_*_arm64.deb
          retention-days: 5

      # TODO: upload spun deb packages to private repo

  build-package-amd64-package:
    needs: build-and-push-image
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # allow access to github docker registry
    permissions:
      contents: read
      packages: read

    steps: 
      <<: *build-package-steps-template

      ### begin Arch specific stuff
      - name: Compile amd64 debian package
        uses: ./
        with:
          # ensure the user in the action matches the current user in the job
          uid: ${{ steps.uidgid.outputs.uid }}
          gid: ${{ steps.uidgid.outputs.gid }}
          bash_script: |
            id
            pwd
            ls -la
            env
            ps -ef | cat
            rustup show
            cargo deb -- --all-features

      - name: Store package artifact
        uses: actions/upload-artifact@v2
        with:
          name: fido2luks-amd64-debs
          path: target/aarch64-unknown-linux-gnu/debian/fido2luks_*_amd64.deb
          retention-days: 5

      # TODO: upload spun deb packages to private repo
